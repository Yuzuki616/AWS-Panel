{"version":3,"sources":["../../../../src/components/VSparkline/helpers/math.ts"],"names":[],"mappings":";;;;;;;;;AAEA,SAAS,GAAT,CAAc,KAAd,EAAoC;AAClC,SAAO,QAAQ,CAAC,KAAD,EAAQ,EAAR,CAAf;AACD;AAED;;;;AAIG;;;AACG,SAAU,cAAV,CAA0B,EAA1B,EAAqC,EAArC,EAAgD,EAAhD,EAAyD;AAC7D,SAAO,GAAG,CAAC,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAX,CAAH,KAAqB,GAAG,CAAC,IAAI,EAAE,CAAC,CAAR,CAAxB,IAAsC,GAAG,CAAC,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAX,CAAH,KAAqB,GAAG,CAAC,IAAI,EAAE,CAAC,CAAR,CAArE;AACD;;AAEK,SAAU,WAAV,CAAuB,EAAvB,EAAkC,EAAlC,EAA2C;AAC/C,SAAO,IAAI,CAAC,IAAL,CACL,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAnB,EAAsB,CAAtB,IAA2B,IAAI,CAAC,GAAL,CAAS,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAnB,EAAsB,CAAtB,CADtB,CAAP;AAGD;;AAEK,SAAU,MAAV,CAAkB,EAAlB,EAA6B,IAA7B,EAA0C,MAA1C,EAAwD;AAC5D,MAAM,MAAM,GAAG;AAAE,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,IAAI,CAAC,CAAjB;AAAoB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,IAAI,CAAC;AAAnC,GAAf;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAW,MAAM,CAAC,CAAP,GAAW,MAAM,CAAC,CAAnB,GAAyB,MAAM,CAAC,CAAP,GAAW,MAAM,CAAC,CAArD,CAAf;AACA,MAAM,UAAU,GAAG;AAAE,IAAA,CAAC,EAAE,MAAM,CAAC,CAAP,GAAW,MAAhB;AAAwB,IAAA,CAAC,EAAE,MAAM,CAAC,CAAP,GAAW;AAAtC,GAAnB;AAEA,SAAO;AACL,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,UAAU,CAAC,CAAX,GAAe,MADtB;AAEL,IAAA,CAAC,EAAE,IAAI,CAAC,CAAL,GAAS,UAAU,CAAC,CAAX,GAAe;AAFtB,GAAP;AAID","sourcesContent":["import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n"],"sourceRoot":"","file":"math.js"}