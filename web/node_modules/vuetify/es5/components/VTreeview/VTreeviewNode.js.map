{"version":3,"sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    } as PropValidator<Record<string, unknown> | null>,\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (!this.disablePerNode && (this.parentIsDisabled && this.selectionType === 'leaf'))\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      const children = getObjectValueByPath(this.item, this.itemChildren)\n      return children && children.filter((child: any) => !this.treeview.isExcluded(getObjectValueByPath(child, this.itemKey)))\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode () {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper () {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildren = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n"],"sourceRoot":"","file":"VTreeviewNode.js"}