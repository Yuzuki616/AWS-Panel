{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"names":[],"mappings":";;;;;;;AAEA;;AAGA;;AACA;;AACA;;AAGA;;AACA;;;;AAPA;AAKA;AAOA,IAAM,UAAU,GAAG,qBACjB,iBADiB,EAEjB,kBAFiB,EAGjB,yBAAyD,gBAAzD,EAA2E,2BAA3E,EAAwG,mBAAxG,CAHiB,CAAnB;AAUA;;eACe,UAAU,CAAC,MAAX,GAA6B,MAA7B,CAAoC;AACjD,EAAA,IAAI,EAAE,2BAD2C;AAGjD,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,QAAQ,EAAE;AADC,KAAP;AAAA,GAH2C;AAOjD,EAAA,QAAQ,EAAE;AACR,IAAA,cADQ,4BACM;AACZ,aAAO,KAAK,cAAL,CAAoB,QAA3B;AACD;AAHO,GAPuC;AAajD,EAAA,KAAK,EAAE;AACL,IAAA,cAAc,EAAE;AACd,MAAA,SAAS,EAAE,IADG;AAEd,MAAA,OAFc,mBAEL,GAFK,EAEA,MAFA,EAEM;AAAA;;AAClB,YAAI,GAAJ,EAAS,KAAK,QAAL,GAAgB,IAAhB;AAET,YAAI,MAAM,IAAI,IAAd,EAAoB,KAAK,QAAL,GAAgB,GAAhB,CAApB,KACK,KAAK,SAAL,CAAe;AAAA,iBAAM,KAAI,CAAC,QAAL,GAAgB,GAAtB;AAAA,SAAf;AACN;AAPa;AADX,GAb0C;AAyBjD,EAAA,OAzBiD,qBAyB1C;AACL,SAAK,cAAL,CAAoB,eAApB,CAAoC,IAApC;AACD,GA3BgD;AA6BjD,EAAA,aA7BiD,2BA6BpC;AACX,SAAK,cAAL,CAAoB,iBAApB;AACD,GA/BgD;AAiCjD,EAAA,MAjCiD,kBAiCzC,CAjCyC,EAiCxC;AAAA;;AACP,WAAO,CAAC,CAAC,8BAAD,EAAoB,KAAK,eAAL,CAAqB;AAAA,aAAM,CACrD,CAAC,CAAC,KAAD,EAAQ,MAAI,CAAC,kBAAL,CAAwB,MAAI,CAAC,KAA7B,EAAoC;AAC3C,QAAA,WAAW,EAAE,2BAD8B;AAE3C,QAAA,UAAU,EAAE,CAAC;AACX,UAAA,IAAI,EAAE,MADK;AAEX,UAAA,KAAK,EAAE,MAAI,CAAC;AAFD,SAAD;AAF+B,OAApC,CAAR,EAMG,CACF,CAAC,CAAC,KAAD,EAAQ;AAAE,QAAA,KAAK,EAAE;AAAT,OAAR,EAAsD,sBAAQ,MAAR,CAAtD,CADC,CANH,CADoD,CAAN;AAAA,KAArB,CAApB,CAAR;AAWD;AA7CgD,CAApC,C","sourcesContent":["// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n"],"sourceRoot":"","file":"VExpansionPanelContent.js"}