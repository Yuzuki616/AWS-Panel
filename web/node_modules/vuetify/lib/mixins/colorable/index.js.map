{"version":3,"sources":["../../../src/mixins/colorable/index.ts"],"names":[],"mappings":"AAAA,OAAO,GAAP,MAAgB,KAAhB;AAEA,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,UAAT,QAA2B,uBAA3B;AAEA,eAAe,GAAG,CAAC,MAAJ,CAAW;AACxB,EAAA,IAAI,EAAE,WADkB;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EAAE;AADF,GAHiB;AAOxB,EAAA,OAAO,EAAE;AACP,IAAA,kBAAkB,CAAE,KAAF,EAA0B,IAAA,GAAkB,EAA5C,EAA8C;AAC9D,UAAI,OAAO,IAAI,CAAC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACA,QAAA,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAO,IAAP;AACD;;AACD,UAAI,OAAO,IAAI,CAAC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACA,QAAA,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAO,IAAP;AACD;;AACD,UAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,QAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,8BAAoB,GAAG,KAAK,EAFjB;AAGX,0BAAgB,GAAG,KAAK;AAHb,SAAb;AAKD,OAND,MAMO,IAAI,KAAJ,EAAW;AAChB,QAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,WAAC,KAAD,GAAS;AAFE,SAAb;AAID;;AAED,aAAO,IAAP;AACD,KA5BM;;AA8BP,IAAA,YAAY,CAAE,KAAF,EAA0B,IAAA,GAAkB,EAA5C,EAA8C;AACxD,UAAI,OAAO,IAAI,CAAC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACA,QAAA,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAO,IAAP;AACD;;AACD,UAAI,OAAO,IAAI,CAAC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACA,QAAA,YAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAO,IAAP;AACD;;AACD,UAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,QAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,UAAA,KAAK,EAAE,GAAG,KAAK,EAFJ;AAGX,yBAAe,GAAG,KAAK;AAHZ,SAAb;AAKD,OAND,MAMO,IAAI,KAAJ,EAAW;AAChB,cAAM,CAAC,SAAD,EAAY,aAAZ,IAA6B,KAAK,CAAC,QAAN,GAAiB,IAAjB,GAAwB,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;AACA,QAAA,IAAI,CAAC,KAAL,GAAa,EACX,GAAG,IAAI,CAAC,KADG;AAEX,WAAC,SAAS,GAAG,QAAb,GAAwB;AAFb,SAAb;;AAIA,YAAI,aAAJ,EAAmB;AACjB,UAAA,IAAI,CAAC,KAAL,CAAW,WAAW,aAAtB,IAAuC,IAAvC;AACD;AACF;;AACD,aAAO,IAAP;AACD;;AA5DM;AAPe,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"],"sourceRoot":"","file":"index.js"}