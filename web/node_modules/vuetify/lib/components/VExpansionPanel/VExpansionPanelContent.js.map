{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"names":[],"mappings":"AAEA,SAAS,iBAAT,QAAkC,gBAAlC,C,CAEA;;AACA,OAAO,QAAP,MAAqB,uBAArB;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,SAAS,MAAM,IAAI,iBAAnB,QAA4C,0BAA5C,C,CAEA;;AACA,SAAS,OAAT,QAAwB,oBAAxB;AACA,OAAO,MAAP,MAAmC,mBAAnC;AAKA,MAAM,UAAU,GAAG,MAAM,CACvB,QADuB,EAEvB,SAFuB,EAGvB,iBAAiB,CAAwC,gBAAxC,EAA0D,2BAA1D,EAAuF,mBAAvF,CAHM,CAAzB;AAUA;;AACA,eAAe,UAAU,CAAC,MAAX,GAA6B,MAA7B,CAAoC;AACjD,EAAA,IAAI,EAAE,2BAD2C;AAGjD,EAAA,IAAI,EAAE,OAAO;AACX,IAAA,QAAQ,EAAE;AADC,GAAP,CAH2C;AAOjD,EAAA,QAAQ,EAAE;AACR,IAAA,cAAc,GAAA;AACZ,aAAO,KAAK,cAAL,CAAoB,QAA3B;AACD;;AAHO,GAPuC;AAajD,EAAA,KAAK,EAAE;AACL,IAAA,cAAc,EAAE;AACd,MAAA,SAAS,EAAE,IADG;;AAEd,MAAA,OAAO,CAAE,GAAF,EAAO,MAAP,EAAa;AAClB,YAAI,GAAJ,EAAS,KAAK,QAAL,GAAgB,IAAhB;AAET,YAAI,MAAM,IAAI,IAAd,EAAoB,KAAK,QAAL,GAAgB,GAAhB,CAApB,KACK,KAAK,SAAL,CAAe,MAAM,KAAK,QAAL,GAAgB,GAArC;AACN;;AAPa;AADX,GAb0C;;AAyBjD,EAAA,OAAO,GAAA;AACL,SAAK,cAAL,CAAoB,eAApB,CAAoC,IAApC;AACD,GA3BgD;;AA6BjD,EAAA,aAAa,GAAA;AACX,SAAK,cAAL,CAAoB,iBAApB;AACD,GA/BgD;;AAiCjD,EAAA,MAAM,CAAE,CAAF,EAAG;AACP,WAAO,CAAC,CAAC,iBAAD,EAAoB,KAAK,eAAL,CAAqB,MAAM,CACrD,CAAC,CAAC,KAAD,EAAQ,KAAK,kBAAL,CAAwB,KAAK,KAA7B,EAAoC;AAC3C,MAAA,WAAW,EAAE,2BAD8B;AAE3C,MAAA,UAAU,EAAE,CAAC;AACX,QAAA,IAAI,EAAE,MADK;AAEX,QAAA,KAAK,EAAE,KAAK;AAFD,OAAD;AAF+B,KAApC,CAAR,EAMG,CACF,CAAC,CAAC,KAAD,EAAQ;AAAE,MAAA,KAAK,EAAE;AAAT,KAAR,EAAsD,OAAO,CAAC,IAAD,CAA7D,CADC,CANH,CADoD,CAA3B,CAApB,CAAR;AAWD;;AA7CgD,CAApC,CAAf","sourcesContent":["// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n"],"sourceRoot":"","file":"VExpansionPanelContent.js"}