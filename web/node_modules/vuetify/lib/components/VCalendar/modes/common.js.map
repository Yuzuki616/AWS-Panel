{"version":3,"sources":["../../../../src/components/VCalendar/modes/common.ts"],"names":[],"mappings":"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","sourcesContent":["import { CalendarEventParsed, CalendarEventVisual, CalendarTimestamp } from 'vuetify/types'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\nconst MILLIS_IN_DAY = 86400000\n\nexport type GetRange = (event: CalendarEventParsed) => [number, number]\n\nexport function getVisuals (events: CalendarEventParsed[], minStart = 0): CalendarEventVisual[] {\n  const visuals = events.map(event => ({\n    event,\n    columnCount: 0,\n    column: 0,\n    left: 0,\n    width: 100,\n  }))\n\n  visuals.sort((a, b) => {\n    return (Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier)) ||\n           (b.event.endTimestampIdentifier - a.event.endTimestampIdentifier)\n  })\n\n  return visuals\n}\n\nexport interface ColumnGroup {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\nexport function hasOverlap (s0: number, e0: number, s1: number, e1: number, exclude = true): boolean {\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1)\n}\n\nexport function setColumnCount (groups: ColumnGroup[]) {\n  groups.forEach(group => {\n    group.visuals.forEach(groupVisual => {\n      groupVisual.columnCount = groups.length\n    })\n  })\n}\n\nexport function getRange (event: CalendarEventParsed): [number, number] {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier]\n}\n\nexport function getDayRange (event: CalendarEventParsed): [number, number] {\n  return [event.startIdentifier, event.endIdentifier]\n}\n\nexport function getNormalizedRange (event: CalendarEventParsed, dayStart: number): [number, number] {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)]\n}\n\nexport function getOpenGroup (groups: ColumnGroup[], start: number, end: number, timed: boolean) {\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i]\n    let intersected = false\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (let k = 0; k < group.visuals.length; k++) {\n        const groupVisual = group.visuals[k]\n        const [groupStart, groupEnd] = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event)\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true\n          break\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function getOverlapGroupHandler (firstWeekday: number) {\n  const handler = {\n    groups: [] as ColumnGroup[],\n    min: -1,\n    max: -1,\n    reset: () => {\n      handler.groups = []\n      handler.min = handler.max = -1\n    },\n    getVisuals: (day: CalendarTimestamp, dayEvents: CalendarEventParsed[], timed: boolean, reset = false) => {\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset()\n      }\n\n      const dayStart = getTimestampIdentifier(day)\n      const visuals = getVisuals(dayEvents, dayStart)\n\n      visuals.forEach(visual => {\n        const [start, end] = timed ? getRange(visual.event) : getDayRange(visual.event)\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups)\n          handler.reset()\n        }\n\n        let targetGroup = getOpenGroup(handler.groups, start, end, timed)\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length\n\n          handler.groups.push({ start, end, visuals: [] })\n        }\n\n        const target = handler.groups[targetGroup]\n        target.visuals.push(visual)\n        target.start = Math.min(target.start, start)\n        target.end = Math.max(target.end, end)\n\n        visual.column = targetGroup\n\n        if (handler.min === -1) {\n          handler.min = start\n          handler.max = end\n        } else {\n          handler.min = Math.min(handler.min, start)\n          handler.max = Math.max(handler.max, end)\n        }\n      })\n\n      setColumnCount(handler.groups)\n\n      if (timed) {\n        handler.reset()\n      }\n\n      return visuals\n    },\n  }\n\n  return handler\n}\n"],"sourceRoot":"","file":"common.js"}