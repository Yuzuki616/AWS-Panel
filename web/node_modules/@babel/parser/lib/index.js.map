{"version":3,"file":"index.js","sources":["../src/util/location.js","../src/parse-error/credentials.js","../src/parse-error/module-errors.js","../src/parse-error/to-node-description.js","../src/parse-error/standard-errors.js","../src/parse-error/strict-mode-errors.js","../src/parse-error/pipeline-operator-errors.js","../src/parse-error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/parser/base.js","../src/parser/comments.js","../src/util/whitespace.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","// @flow\n\nexport const ParseErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ParseErrorCode = $Values<typeof ParseErrorCodes>;\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode,\n  reasonCode: string,\n  syntaxPlugin?: SyntaxPlugin,\n\n  toMessage: ToMessage<ErrorDetails>,\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce(\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: () => any,\n  properties: Object,\n  descriptors: Object,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign((new constructor(): T), properties),\n    );\n\nexport { instantiate };\n","// @flow\n\nimport { ParseErrorCodes, toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  ImportMetaOutsideModule: _(\n    `import.meta may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n  ImportOutsideModule: _(\n    `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    { code: ParseErrorCodes.SourceTypeModuleError },\n  ),\n});\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = $Keys<\n  $Diff<typeof NodeDescriptions, { UpdateExpression: any }>,\n>;\ntype NodeWithDescription =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | { type: NodeTypesWithDescriptions };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix)]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\", prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"Identfier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\",\n    };\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  AccessorIsGenerator: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `A ${kind}ter cannot be a generator.`,\n  ),\n\n  ArgumentsInClass: _(\n    \"'arguments' is only allowed in functions and class methods.\",\n  ),\n  AsyncFunctionInSingleStatementContext: _(\n    \"Async functions can only be declared at the top level or inside a block.\",\n  ),\n  AwaitBindingIdentifier: _(\n    \"Can not use 'await' as identifier inside an async function.\",\n  ),\n  AwaitBindingIdentifierInStaticBlock: _(\n    \"Can not use 'await' as identifier inside a static block.\",\n  ),\n  AwaitExpressionFormalParameter: _(\n    \"'await' is not allowed in async function parameters.\",\n  ),\n  AwaitNotInAsyncContext: _(\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  ),\n  AwaitNotInAsyncFunction: _(\"'await' is only allowed within async functions.\"),\n  BadGetterArity: _(\"A 'get' accesor must not have any formal parameters.\"),\n  BadSetterArity: _(\"A 'set' accesor must have exactly one formal parameter.\"),\n  BadSetterRestParameter: _(\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ),\n  ConstructorClassField: _(\"Classes may not have a field named 'constructor'.\"),\n  ConstructorClassPrivateField: _(\n    \"Classes may not have a private field named '#constructor'.\",\n  ),\n  ConstructorIsAccessor: _(\"Class constructor may not be an accessor.\"),\n  ConstructorIsAsync: _(\"Constructor can't be an async function.\"),\n  ConstructorIsGenerator: _(\"Constructor can't be a generator.\"),\n  DeclarationMissingInitializer: _<{| kind: \"const\" | \"destructuring\" |}>(\n    ({ kind }) => `Missing initializer in ${kind} declaration.`,\n  ),\n  DecoratorBeforeExport: _(\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  ),\n  DecoratorConstructor: _(\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  ),\n  DecoratorExportClass: _(\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  ),\n  DecoratorSemicolon: _(\"Decorators must not be followed by a semicolon.\"),\n  DecoratorStaticBlock: _(\"Decorators can't be used with a static block.\"),\n  DeletePrivateField: _(\"Deleting a private field is not allowed.\"),\n  DestructureNamedImport: _(\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  ),\n  DuplicateConstructor: _(\"Duplicate constructor in the same class.\"),\n  DuplicateDefaultExport: _(\"Only one default export allowed per module.\"),\n  DuplicateExport: _<{| exportName: string |}>(\n    ({ exportName }) =>\n      `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  ),\n  DuplicateProto: _(\"Redefinition of __proto__ property.\"),\n  DuplicateRegExpFlags: _(\"Duplicate regular expression flag.\"),\n  ElementAfterRest: _(\"Rest element must be last element.\"),\n  EscapedCharNotAnIdentifier: _(\"Invalid Unicode escape.\"),\n  ExportBindingIsString: _<{| localName: string, exportName: string |}>(\n    ({ localName, exportName }) =>\n      `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ),\n  ExportDefaultFromAsIdentifier: _(\n    \"'from' is not allowed as an identifier after 'export default'.\",\n  ),\n\n  ForInOfLoopInitializer: _<{| type: \"ForInStatement\" | \"ForOfStatement\" |}>(\n    ({ type }) =>\n      `'${\n        type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n      }' loop variable declaration may not have an initializer.`,\n  ),\n\n  ForOfAsync: _(\"The left-hand side of a for-of loop may not be 'async'.\"),\n  ForOfLet: _(\"The left-hand side of a for-of loop may not start with 'let'.\"),\n  GeneratorInSingleStatementContext: _(\n    \"Generators can only be declared at the top level or inside a block.\",\n  ),\n\n  IllegalBreakContinue: _<{| type: \"BreakStatement\" | \"ContinueStatement\" |}>(\n    ({ type }) =>\n      `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  ),\n\n  IllegalLanguageModeDirective: _(\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  ),\n  IllegalReturn: _(\"'return' outside of function.\"),\n  ImportBindingIsString: _<{| importName: string |}>(\n    ({ importName }) =>\n      `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ),\n  ImportCallArgumentTrailingComma: _(\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ),\n  ImportCallArity: _<{| maxArgumentCount: 1 | 2 |}>(\n    ({ maxArgumentCount }) =>\n      `\\`import()\\` requires exactly ${\n        maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n      }.`,\n  ),\n  ImportCallNotNewExpression: _(\"Cannot use new with import(...).\"),\n  ImportCallSpreadArgument: _(\"`...` is not allowed in `import()`.\"),\n  IncompatibleRegExpUVFlags: _(\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  ),\n  InvalidBigIntLiteral: _(\"Invalid BigIntLiteral.\"),\n  InvalidCodePoint: _(\"Code point out of bounds.\"),\n  InvalidCoverInitializedName: _(\"Invalid shorthand property initializer.\"),\n  InvalidDecimal: _(\"Invalid decimal.\"),\n  InvalidDigit: _<{| radix: number |}>(\n    ({ radix }) => `Expected number in radix ${radix}.`,\n  ),\n  InvalidEscapeSequence: _(\"Bad character escape sequence.\"),\n  InvalidEscapeSequenceTemplate: _(\"Invalid escape sequence in template.\"),\n  InvalidEscapedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,\n  ),\n  InvalidIdentifier: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Invalid identifier ${identifierName}.`,\n  ),\n  InvalidLhs: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidLhsBinding: _<{| ancestor: LValAncestor |}>(\n    ({ ancestor }) =>\n      `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  ),\n  InvalidNumber: _(\"Invalid number.\"),\n  InvalidOrMissingExponent: _(\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  ),\n  InvalidOrUnexpectedToken: _<{| unexpected: string |}>(\n    ({ unexpected }) => `Unexpected character '${unexpected}'.`,\n  ),\n  InvalidParenthesizedAssignment: _(\n    \"Invalid parenthesized assignment pattern.\",\n  ),\n  InvalidPrivateFieldResolution: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Private name #${identifierName} is not defined.`,\n  ),\n  InvalidPropertyBindingPattern: _(\"Binding member expression.\"),\n  InvalidRecordProperty: _(\n    \"Only properties and spread elements are allowed in record definitions.\",\n  ),\n  InvalidRestAssignmentPattern: _(\"Invalid rest operator's argument.\"),\n  LabelRedeclaration: _<{| labelName: string |}>(\n    ({ labelName }) => `Label '${labelName}' is already declared.`,\n  ),\n  LetInLexicalBinding: _(\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  ),\n  LineTerminatorBeforeArrow: _(\"No line break is allowed before '=>'.\"),\n  MalformedRegExpFlags: _(\"Invalid regular expression flag.\"),\n  MissingClassName: _(\"A class name is required.\"),\n  MissingEqInAssignment: _(\n    \"Only '=' operator can be used for specifying default value.\",\n  ),\n  MissingSemicolon: _(\"Missing semicolon.\"),\n  MissingPlugin: _<{| missingPlugin: [string] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also), seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: _<{| missingPlugin: string[] |}>(\n    ({ missingPlugin }) =>\n      `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n        .map(name => JSON.stringify(name))\n        .join(\", \")}.`,\n  ),\n  MissingUnicodeEscape: _(\"Expecting Unicode escape sequence \\\\uXXXX.\"),\n  MixingCoalesceWithLogical: _(\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ),\n  ModuleAttributeDifferentFromType: _(\n    \"The only accepted module attribute is `type`.\",\n  ),\n  ModuleAttributeInvalidValue: _(\n    \"Only string literals are allowed as module attribute values.\",\n  ),\n  ModuleAttributesWithDuplicateKeys: _<{| key: string |}>(\n    ({ key }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ),\n  ModuleExportNameHasLoneSurrogate: _<{| surrogateCharCode: number |}>(\n    ({ surrogateCharCode }) =>\n      `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n        16,\n      )}'.`,\n  ),\n  ModuleExportUndefined: _<{| localName: string |}>(\n    ({ localName }) => `Export '${localName}' is not defined.`,\n  ),\n  MultipleDefaultsInSwitch: _(\"Multiple default clauses.\"),\n  NewlineAfterThrow: _(\"Illegal newline after throw.\"),\n  NoCatchOrFinally: _(\"Missing catch or finally clause.\"),\n  NumberIdentifier: _(\"Identifier directly after number.\"),\n  NumericSeparatorInEscapeSequence: _(\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ),\n  ObsoleteAwaitStar: _(\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  ),\n  OptionalChainingNoNew: _(\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  ),\n  OptionalChainingNoTemplate: _(\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  ),\n  OverrideOnConstructor: _(\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ),\n  ParamDupe: _(\"Argument name clash.\"),\n  PatternHasAccessor: _(\"Object pattern can't contain getter or setter.\"),\n  PatternHasMethod: _(\"Object pattern can't contain methods.\"),\n  PrivateInExpectedIn: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  ),\n  PrivateNameRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) => `Duplicate private name #${identifierName}.`,\n  ),\n  RecordExpressionBarIncorrectEndSyntaxType: _(\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionBarIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  RecordExpressionHashIncorrectStartSyntaxType: _(\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  RecordNoProto: _(\"'__proto__' is not allowed in Record expressions.\"),\n  RestTrailingComma: _(\"Unexpected trailing comma after rest element.\"),\n  SloppyFunction: _(\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  ),\n  StaticPrototype: _(\"Classes may not have static property named prototype.\"),\n  SuperNotAllowed: _(\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  ),\n  SuperPrivateField: _(\"Private fields can't be accessed on super.\"),\n  TrailingDecorator: _(\"Decorators must be attached to a class element.\"),\n  TupleExpressionBarIncorrectEndSyntaxType: _(\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionBarIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  ),\n  TupleExpressionHashIncorrectStartSyntaxType: _(\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  ),\n  UnexpectedArgumentPlaceholder: _(\"Unexpected argument placeholder.\"),\n  UnexpectedAwaitAfterPipelineBody: _(\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  ),\n  UnexpectedDigitAfterHash: _(\"Unexpected digit after hash token.\"),\n  UnexpectedImportExport: _(\n    \"'import' and 'export' may only appear at the top level.\",\n  ),\n  UnexpectedKeyword: _<{| keyword: string |}>(\n    ({ keyword }) => `Unexpected keyword '${keyword}'.`,\n  ),\n  UnexpectedLeadingDecorator: _(\n    \"Leading decorators must be attached to a class declaration.\",\n  ),\n  UnexpectedLexicalDeclaration: _(\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  ),\n  UnexpectedNewTarget: _(\n    \"`new.target` can only be used in functions or class properties.\",\n  ),\n  UnexpectedNumericSeparator: _(\n    \"A numeric separator is only allowed between two digits.\",\n  ),\n  UnexpectedPrivateField: _(\"Unexpected private name.\"),\n  UnexpectedReservedWord: _<{| reservedWord: string |}>(\n    ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,\n  ),\n  UnexpectedSuper: _(\"'super' is only allowed in object methods and classes.\"),\n  UnexpectedToken: _<{|\n    expected?: ?string,\n    unexpected?: ?string,\n  |}>(\n    ({ expected, unexpected }) =>\n      `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n        expected ? `, expected \"${expected}\"` : \"\"\n      }`,\n  ),\n  UnexpectedTokenUnaryExponentiation: _(\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  ),\n  UnsupportedBind: _(\"Binding should be performed on object property.\"),\n  UnsupportedDecoratorExport: _(\n    \"A decorated export must export a class declaration.\",\n  ),\n  UnsupportedDefaultExport: _(\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  ),\n  UnsupportedImport: _(\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  ),\n  UnsupportedMetaProperty: _<{|\n    target: string,\n    onlyValidPropertyName: string,\n  |}>(\n    ({ target, onlyValidPropertyName }) =>\n      `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  ),\n  UnsupportedParameterDecorator: _(\n    \"Decorators cannot be used to decorate parameters.\",\n  ),\n  UnsupportedPropertyDecorator: _(\n    \"Decorators cannot be used to decorate object literal properties.\",\n  ),\n  UnsupportedSuper: _(\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  ),\n  UnterminatedComment: _(\"Unterminated comment.\"),\n  UnterminatedRegExp: _(\"Unterminated regular expression.\"),\n  UnterminatedString: _(\"Unterminated string constant.\"),\n  UnterminatedTemplate: _(\"Unterminated template.\"),\n  VarRedeclaration: _<{| identifierName: string |}>(\n    ({ identifierName }) =>\n      `Identifier '${identifierName}' has already been declared.`,\n  ),\n  YieldBindingIdentifier: _(\n    \"Can not use 'yield' as identifier inside a generator.\",\n  ),\n  YieldInParameter: _(\"Yield expression is not allowed in formal parameters.\"),\n  ZeroDigitNumericSeparator: _(\n    \"Numeric separator can not be used after leading 0.\",\n  ),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  StrictDelete: _(\"Deleting local variable in strict mode.\"),\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: _<{| referenceName: string |}>(\n    ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,\n  ),\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: _<{| bindingName: string |}>(\n    ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,\n  ),\n\n  StrictFunction: _(\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  ),\n  StrictNumericEscape: _(\n    \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  ),\n  StrictOctalLiteral: _(\n    \"Legacy octal literals are not allowed in strict mode.\",\n  ),\n  StrictWith: _(\"'with' in strict mode.\"),\n});\n","// @flow\n\nimport { toParseErrorCredentials } from \"../parse-error\";\nimport toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set<string>([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n]);\n\nexport default (_: typeof toParseErrorCredentials) => ({\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter: _(\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  ),\n  PipeTopicRequiresHackPipes: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n  PipeTopicUnbound: _(\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  ),\n  PipeTopicUnconfiguredToken: _<{| token: string |}>(\n    ({ token }) =>\n      `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  ),\n  PipeTopicUnused: _(\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  ),\n  PipeUnparenthesizedBody: _<{| type: string |}>(\n    ({ type }) =>\n      `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n        type,\n      })}; please wrap it in parentheses.`,\n  ),\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow: _(\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  ),\n  PipelineBodySequenceExpression: _(\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  ),\n  PipelineHeadSequenceExpression: _(\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  ),\n  PipelineTopicUnused: _(\n    \"Pipeline is in topic style but does not use topic reference.\",\n  ),\n  PrimaryTopicNotAllowed: _(\n    \"Topic reference was used in a lexical context without topic binding.\",\n  ),\n  PrimaryTopicRequiresSmartPipeline: _(\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  ),\n});\n","// @flow\n\nimport { Position } from \"./util/location\";\nimport type { NodeBase } from \"./types\";\nimport {\n  instantiate,\n  type ParseErrorCode,\n  ParseErrorCodes,\n  type ParseErrorCredentials,\n} from \"./parse-error/credentials\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: string;\n\n  missingPlugin?: string | string[];\n\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = ({\n  loc: Position,\n  details: ErrorDetails,\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails: Object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = { loc: Position, details: ErrorDetails };\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate<ParseError<ErrorDetails>>(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(overrides: { loc?: Position, details?: ErrorDetails } = {}) {\n          const loc = overrides.loc || {};\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get() {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    );\n  };\n}\n\n// This part is tricky. You'll probably notice from the name of this function\n// that it is supposed to return `ParseErrorCredentials`, but instead these.\n// declarations seem to instead imply that they return\n// `ParseErrorConstructor<ErrorDetails>` instead. This is because in Flow we\n// can't easily extract parameter types (either from functions, like with\n// Typescript's Parameters<f> utility type, or from generic types either). As\n// such, this function does double duty: packaging up the credentials during\n// its actual runtime operation, but pretending to return the\n// `ParseErrorConstructor<ErrorDetails>` that we won't actually have until later\n// to the type system, avoiding the need to do so with $ObjMap (which doesn't\n// work) in `ParseErrorEnum`. This hack won't be necessary when we switch to\n// Typescript.\ndeclare function toParseErrorCredentials<T: string>(\n  T,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<{||}>;\n\n// ESLint seems to erroneously think that Flow's overloading syntax is an\n// accidental redeclaration of the function:\n// https://github.com/babel/eslint-plugin-babel/issues/162\n// eslint-disable-next-line no-redeclare\ndeclare function toParseErrorCredentials<ErrorDetails>(\n  (ErrorDetails) => string,\n  ?{ code?: ParseErrorCode, reasonCode?: string } | boolean,\n): ParseErrorConstructor<ErrorDetails>;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function toParseErrorCredentials(toMessageOrMessage, credentials) {\n  return {\n    toMessage:\n      typeof toMessageOrMessage === \"string\"\n        ? () => toMessageOrMessage\n        : toMessageOrMessage,\n    ...credentials,\n  };\n}\n\n// This is the templated form.\ndeclare function ParseErrorEnum(string[]): typeof ParseErrorEnum;\n\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\ndeclare function ParseErrorEnum<T>(\n  toParseErrorCredentials: (typeof toParseErrorCredentials) => T,\n  syntaxPlugin?: string,\n): T;\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either error\n// messages, or `toMessage` functions that define additional necessary `details`\n// needed by the `ParseError`:\n//\n// ParseErrorEnum`optionalSyntaxPlugin` (_ => ({\n//   ErrorWithStaticMessage: _(\"message\"),\n//   ErrorWithDynamicMessage: _<{ type: string }>(({ type }) => `${type}`),\n// });\n//\n// See comment about eslint and Flow overloading above.\n// eslint-disable-next-line no-redeclare\nexport function ParseErrorEnum(argument, syntaxPlugin) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return toParseErrorCredentialsMap =>\n      ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);\n  }\n\n  const partialCredentials = argument(toParseErrorCredentials);\n  const ParseErrorConstructors = {};\n\n  for (const reasonCode of Object.keys(partialCredentials)) {\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCodes.SyntaxError,\n      reasonCode,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...partialCredentials[reasonCode],\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {|\n  ...ErrorDetails,\n  at: Position | NodeBase,\n|};\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Property\" ? \"value\" : super.isValidLVal(type, ...rest);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(...arguments);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: ch => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: ch => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: ch => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: ch =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const isAllowedSibling =\n      radix === 16\n        ? isAllowedNumericSeparatorSibling.hex\n        : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n        ? isAllowedNumericSeparatorSibling.oct\n        : isAllowedNumericSeparatorSibling.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          Number.isNaN(next) ||\n          !isAllowedSibling(next) ||\n          forbiddenSiblings.has(prev) ||\n          forbiddenSiblings.has(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(Errors.InvalidDigit, {\n            at: this.state.curPosition(),\n            radix,\n          });\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            at: createPositionWithColumnOffset(this.state.curPosition(), -1),\n          });\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .slice(this.state.pos - 1, this.state.pos + 2)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n                at: codePos,\n              });\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | empty {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: string, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: string[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n}\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","// @flow\n\nimport { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\n\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{||}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{||}>,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: ([ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    { at: node }: { at: Node },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{||}>,\n    { at: node }: { at: Node },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParseError<any>),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`(_ => ({\n  AmbiguousConditionalArrow: _(\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  ),\n  AmbiguousDeclareModuleKind: _(\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  ),\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,\n  ),\n  DeclareClassElement: _(\n    \"The `declare` modifier can only appear on class fields.\",\n  ),\n  DeclareClassFieldInitializer: _(\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  ),\n  DuplicateDeclareModuleExports: _(\n    \"Duplicate `declare module.exports` statement.\",\n  ),\n  EnumBooleanMemberNotInitialized: _<{|\n    memberName: string,\n    enumName: string,\n  |}>(\n    ({ memberName, enumName }) =>\n      `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumDuplicateMemberName: _<{| memberName: string, enumName: string |}>(\n    ({ memberName, enumName }) =>\n      `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  ),\n  EnumInconsistentMemberValues: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  ),\n  EnumInvalidExplicitType: _<{| invalidEnumType: string, enumName: string |}>(\n    ({ invalidEnumType, enumName }) =>\n      `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidExplicitTypeUnknownSupplied: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  ),\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName, explicitType }) =>\n      // $FlowIgnore (coercing null which never actually happens)\n      `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  ),\n  EnumInvalidMemberInitializerSymbolType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberInitializerUnknownType: _<{|\n    enumName: string,\n    memberName: string,\n    explicitType: EnumExplicitType,\n  |}>(\n    ({ enumName, memberName }) =>\n      `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  ),\n  EnumInvalidMemberName: _<{|\n    enumName: string,\n    memberName: string,\n    suggestion: string,\n  |}>(\n    ({ enumName, memberName, suggestion }) =>\n      `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  ),\n  EnumNumberMemberNotInitialized: _<{|\n    enumName: string,\n    memberName: string,\n  |}>(\n    ({ enumName, memberName }) =>\n      `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  ),\n  EnumStringMemberInconsistentlyInitailized: _<{| enumName: string |}>(\n    ({ enumName }) =>\n      `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  ),\n  GetterMayNotHaveThisParam: _(\"A getter cannot have a `this` parameter.\"),\n  ImportTypeShorthandOnlyInPureImport: _(\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  ),\n  InexactInsideExact: _(\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  ),\n  InexactInsideNonObject: _(\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  ),\n  InexactVariance: _(\"Explicit inexact syntax cannot have variance.\"),\n  InvalidNonTypeImportInDeclareModule: _(\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  ),\n  MissingTypeParamDefault: _(\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  ),\n  NestedDeclareModule: _(\n    \"`declare module` cannot be used inside another `declare module`.\",\n  ),\n  NestedFlowComment: _(\n    \"Cannot have a flow comment inside another flow comment.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    !process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {},\n  ),\n  SetterMayNotHaveThisParam: _(\"A setter cannot have a `this` parameter.\"),\n  SpreadVariance: _(\"Spread properties cannot have variance.\"),\n  ThisParamAnnotationRequired: _(\n    \"A type annotation is required for the `this` parameter.\",\n  ),\n  ThisParamBannedInConstructor: _(\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ),\n  ThisParamMayNotBeOptional: _(\"The `this` parameter cannot be optional.\"),\n  ThisParamMustBeFirst: _(\n    \"The `this` parameter must be the first function parameter.\",\n  ),\n  ThisParamNoDefault: _(\"The `this` parameter may not have a default value.\"),\n  TypeBeforeInitializer: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeCastInPattern: _(\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  ),\n  UnexpectedExplicitInexactInObject: _(\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  ),\n  UnexpectedReservedType: _<{| reservedType: string |}>(\n    ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,\n  ),\n  UnexpectedReservedUnderscore: _(\n    \"`_` is only allowed as a type argument to call or new.\",\n  ),\n  UnexpectedSpaceBetweenModuloChecks: _(\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  ),\n  UnexpectedSpreadType: _(\n    \"Spread operator cannot appear in class or interface definitions.\",\n  ),\n  UnexpectedSubtractionOperand: _(\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  ),\n  UnexpectedTokenAfterTypeParameter: _(\n    \"Expected an arrow function after this type parameter declaration.\",\n  ),\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: _(\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  ),\n  UnsupportedDeclareExportKind: _<{|\n    unsupportedExportKind: string,\n    suggestion: string,\n  |}>(\n    ({ unsupportedExportKind, suggestion }) =>\n      `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  ),\n  UnsupportedStatementInDeclareModule: _(\n    \"Only declares and type imports are allowed inside declare module.\",\n  ),\n  UnterminatedFlowComment: _(\"Unterminated flow-comment.\"),\n}));\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(...arguments);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"TypeCastExpression\" || super.isValidLVal(type, ...rest);\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string, __proto__: null } = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`(_ => ({\n  AttributeIsEmpty: _(\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  ),\n  MissingClosingTagElement: _<{| openingTagName: string |}>(\n    ({ openingTagName }) =>\n      `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  ),\n  MissingClosingTagFragment: _(\n    \"Expected corresponding JSX closing tag for <>.\",\n  ),\n  UnexpectedSequenceExpression: _(\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  ),\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: _<{| unexpected: string, HTMLEntity: string |}>(\n    ({ unexpected, HTMLEntity }) =>\n      `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  ),\n  UnsupportedJsxValue: _(\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  ),\n  UnterminatedJsxContent: _(\"Unterminated JSX contents.\"),\n  UnwrappedAdjacentJSXElements: _(\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            // $FlowIgnore\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              // $FlowIgnore\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n  tokenIsBinaryOperator,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction tsTokenCanStartExpression(token: TokenType) {\n  // tsc considers binary operators as \"can start expression\" tokens:\n  // https://github.com/microsoft/TypeScript/blob/eca1b4/src/compiler/parser.ts#L4260-L4266\n  return tokenCanStartExpression(token) || tokenIsBinaryOperator(token);\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`(_ => ({\n  AbstractMethodHasImplementation: _<{| methodName: string |}>(\n    ({ methodName }) =>\n      `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  ),\n  AbstractPropertyHasInitializer: _<{| propertyName: string |}>(\n    ({ propertyName }) =>\n      `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  ),\n  AccesorCannotDeclareThisParameter: _(\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  ),\n  AccesorCannotHaveTypeParameters: _(\n    \"An accessor cannot have type parameters.\",\n  ),\n  CannotFindName: _<{| name: string |}>(\n    ({ name }) => `Cannot find name '${name}'.`,\n  ),\n  ClassMethodHasDeclare: _(\"Class methods cannot have the 'declare' modifier.\"),\n  ClassMethodHasReadonly: _(\n    \"Class methods cannot have the 'readonly' modifier.\",\n  ),\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _(\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ),\n  ConstructorHasTypeParameters: _(\n    \"Type parameters cannot appear on a constructor declaration.\",\n  ),\n  DeclareAccessor: _<{| kind: \"get\" | \"set\" |}>(\n    ({ kind }) => `'declare' is not allowed in ${kind}ters.`,\n  ),\n  DeclareClassFieldHasInitializer: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  DeclareFunctionHasImplementation: _(\n    \"An implementation cannot be declared in ambient contexts.\",\n  ),\n  DuplicateAccessibilityModifier: _<{| modifier: N.Accessibility |}>(\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line no-unused-vars\n    ({ modifier }) => `Accessibility modifier already seen.`,\n  ),\n  DuplicateModifier: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `Duplicate modifier: '${modifier}'.`,\n  ),\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: _<{| token: \"extends\" | \"implements\" |}>(\n    ({ token }) => `'${token}' list cannot be empty.`,\n  ),\n  EmptyTypeArguments: _(\"Type argument list cannot be empty.\"),\n  EmptyTypeParameters: _(\"Type parameter list cannot be empty.\"),\n  ExpectedAmbientAfterExportDeclare: _(\n    \"'export declare' must be followed by an ambient declaration.\",\n  ),\n  ImportAliasHasImportType: _(\"An import alias can not use 'import type'.\"),\n  IncompatibleModifiers: _<{| modifiers: [TsModifier, TsModifier] |}>(\n    ({ modifiers }) =>\n      `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  ),\n  IndexSignatureHasAbstract: _(\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  ),\n  IndexSignatureHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  IndexSignatureHasDeclare: _(\n    \"Index signatures cannot have the 'declare' modifier.\",\n  ),\n  IndexSignatureHasOverride: _(\n    \"'override' modifier cannot appear on an index signature.\",\n  ),\n  IndexSignatureHasStatic: _(\n    \"Index signatures cannot have the 'static' modifier.\",\n  ),\n  InitializerNotAllowedInAmbientContext: _(\n    \"Initializers are not allowed in ambient contexts.\",\n  ),\n  InvalidModifierOnTypeMember: _<{| modifier: TsModifier |}>(\n    ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,\n  ),\n  InvalidModifierOnTypeParameter: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier cannot appear on a type parameter.`,\n  ),\n  InvalidModifierOnTypeParameterPositions: _<{| modifier: TsModifier |}>(\n    ({ modifier }) =>\n      `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  ),\n  InvalidModifiersOrder: _<{| orderedModifiers: [TsModifier, TsModifier] |}>(\n    ({ orderedModifiers }) =>\n      `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  ),\n  InvalidTupleMemberLabel: _(\n    \"Tuple members must be labeled with a simple identifier.\",\n  ),\n  MissingInterfaceName: _(\n    \"'interface' declarations must be followed by an identifier.\",\n  ),\n  MixedLabeledAndUnlabeledElements: _(\n    \"Tuple members must all have names or all not have names.\",\n  ),\n  NonAbstractClassHasAbstractMethod: _(\n    \"Abstract methods can only appear within an abstract class.\",\n  ),\n  NonClassMethodPropertyHasAbstractModifer: _(\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  ),\n  OptionalTypeBeforeRequired: _(\n    \"A required element cannot follow an optional element.\",\n  ),\n  OverrideNotInSubClass: _(\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  ),\n  PatternIsOptional: _(\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  ),\n  PrivateElementHasAbstract: _(\n    \"Private elements cannot have the 'abstract' modifier.\",\n  ),\n  PrivateElementHasAccessibility: _<{| modifier: N.Accessibility |}>(\n    ({ modifier }) =>\n      `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ),\n  ReadonlyForMethodSignature: _(\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ),\n  ReservedArrowTypeParam: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ),\n  ReservedTypeAssertion: _(\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  ),\n  SetAccesorCannotHaveOptionalParameter: _(\n    \"A 'set' accessor cannot have an optional parameter.\",\n  ),\n  SetAccesorCannotHaveRestParameter: _(\n    \"A 'set' accessor cannot have rest parameter.\",\n  ),\n  SetAccesorCannotHaveReturnType: _(\n    \"A 'set' accessor cannot have a return type annotation.\",\n  ),\n  SingleTypeParameterWithoutTrailingComma: _<{| typeParameterName: string |}>(\n    ({ typeParameterName }) =>\n      `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  ),\n  StaticBlockCannotHaveModifier: _(\n    \"Static class blocks cannot have any modifier.\",\n  ),\n  TypeAnnotationAfterAssign: _(\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  ),\n  TypeImportCannotSpecifyDefaultAndNamed: _(\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  ),\n  TypeModifierIsUsedInTypeExports: _(\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  ),\n  TypeModifierIsUsedInTypeImports: _(\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  ),\n  UnexpectedParameterModifier: _(\n    \"A parameter property is only allowed in a constructor implementation.\",\n  ),\n  UnexpectedReadonly: _(\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  ),\n  UnexpectedTypeAnnotation: _(\"Did not expect a type annotation here.\"),\n  UnexpectedTypeCastInParameter: _(\n    \"Unexpected type cast in parameter position.\",\n  ),\n  UnsupportedImportTypeArgument: _(\n    \"Argument in a type import must be a string literal.\",\n  ),\n  UnsupportedParameterPropertyKind: _(\n    \"A parameter property may not be declared using a binding pattern.\",\n  ),\n  UnsupportedSignatureParameterKind: _<{| type: string |}>(\n    ({ type }) =>\n      `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n  ),\n}));\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(modifier: string): boolean %checks {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      stopOnStartOfClassStaticBlock?: boolean,\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any,\n    }): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: N.TsTypeParameter,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: ?(node: N.TsTypeParameter) => void,\n    ): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: ?(node: N.TsTypeParameter) => void) {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node: N.TsExpressionWithTypeArguments = this.startNode();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n      properties: { declare?: true } = {},\n    ): ?N.TsInterfaceDeclaration {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      properties: { const?: true, declare?: true } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) throw this.unexpected();\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            throw this.unexpected();\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // $FlowIgnore (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // $FlowIgnore\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          // TODO: This doesn't exactly match what TS does when it comes to ASI.\n          // For example,\n          //   a<b>\n          //   if (0);\n          // is not valid TS code (https://github.com/microsoft/TypeScript/issues/48654)\n          // However, it should correctly parse anything that is correctly parsed by TS.\n          if (\n            tsTokenCanStartExpression(this.state.type) &&\n            this.state.type !== tt.parenL\n          ) {\n            // Bail out. We have something like a<b>c, which is not an expression with\n            // type arguments but an (a < b) > c comparison.\n            throw this.unexpected();\n          }\n\n          const node: N.TsInstantiationExpression = this.startNodeAt(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node: N.TsEnumDeclaration = this.startNode();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(this.startNode());\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member: any).accessibility,\n          });\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: ?N.Declaration =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      let invalidSingleType: ?N.TsTypeParameter;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        // report error if single type parameter used without trailing comma.\n        if (\n          this.hasPlugin(\"jsx\") &&\n          expr.typeParameters.params.length === 1 &&\n          !expr.typeParameters.extra?.trailingComma\n        ) {\n          const parameter = expr.typeParameters.params[0];\n          if (!parameter.constraint) {\n            // A single type parameter must either have constraints\n            // or a trailing comma, otherwise it's ambiguous with JSX.\n            invalidSingleType = parameter;\n          }\n        }\n\n        return expr;\n      }, state);\n\n      if (process.env.BABEL_8_BREAKING) {\n        if (invalidSingleType) {\n          this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n            at: createPositionWithColumnOffset(invalidSingleType.loc.end, 1),\n            typeParameterName: invalidSingleType.name.name,\n          });\n        }\n      }\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | ?N.TsInterfaceDeclaration {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({\n  ClassNameIsRequired: _(\"A class name is required.\"),\n  UnexpectedSpace: _(\"Unexpected space in placeholder.\"),\n}));\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    isValidLVal(type: string, ...rest) {\n      return type === \"Placeholder\" || super.isValidLVal(type, ...rest);\n    }\n\n    toAssignable(node: N.Node): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(...arguments);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  ObjectMember,\n  /*:: TsNamedTypeElementBase, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\n\nconst getOwn = (object, key) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line no-unused-vars\n    binding: BindingTypes,\n  ) {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor,\n      binding?: BindingTypes,\n      checkClashes?: Set<string> | false,\n      strictModeChanged?: boolean,\n      allowingSloppyLetBinding?: boolean,\n      hasParenthesizedAncestor?: boolean,\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // $FlowIgnore\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, {\n        in: this.finishNode(node, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(startPos, startLoc, val);\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = expression;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.NewExpression): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(node: N.NewExpression): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // $FlowIgnore\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // $FlowIgnore\n                !!node.key\n                  ? node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      { at: node },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      { at: node },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier(specifier: N.Node, type: string) {\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value,\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","_","ImportMetaOutsideModule","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","clone","overrides","message","pos","toParseErrorCredentials","toMessageOrMessage","credentials","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","toParseErrorCredentialsMap","partialCredentials","ParseErrorConstructors","reasonCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","rest","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","raise","at","arguments","finishCallExpression","optional","callee","source","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","template","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsBinaryOperator","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","Token","Tokenizer","isLookahead","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","inClass","content","mods","char","includes","readInt","len","forceLen","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","Number","isNaN","errorRecovery","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","tsTokenCanStartExpression","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","trailingComma","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","isUnparenthesizedInAssign","binding","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","isLast","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","strictModeChanged","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","nodes","surrogate","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}